package com.project.nolbom

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.google.accompanist.permissions.*
import com.project.nolbom.data.location.LocationManager
import com.project.nolbom.data.network.UserLocationInfo
import com.project.nolbom.map.KakaoMapView

@OptIn(ExperimentalPermissionsApi::class)
@Composable
fun FullScreenMapScreen(
    navController: NavHostController
) {
    val context = LocalContext.current

    // ÏúÑÏπò Ï∂îÏ†Å ViewModel
    val locationManager = remember { LocationManager(context) }
    val locationViewModel = remember {
        LocationViewModel(
            locationManager = locationManager,
            serverUrl = "http://127.0.0.1:3000" // Ïã§Ï†ú ÏÑúÎ≤Ñ IPÎ°ú Î≥ÄÍ≤Ω
        )
    }
    val locationState by locationViewModel.locationState.collectAsState()

    // ÏúÑÏπò Í∂åÌïú ÏÉÅÌÉú
    val locationPermissions = rememberMultiplePermissionsState(
        permissions = listOf(
            android.Manifest.permission.ACCESS_FINE_LOCATION,
            android.Manifest.permission.ACCESS_COARSE_LOCATION
        )
    )

    // Í∂åÌïúÏù¥ ÌóàÏö©ÎêòÎ©¥ ÎßàÏßÄÎßâ ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞
    LaunchedEffect(locationPermissions.allPermissionsGranted) {
        if (locationPermissions.allPermissionsGranted) {
            locationViewModel.getLastKnownLocation()
        }
    }

    Box(modifier = Modifier.fillMaxSize()) {
        if (locationPermissions.allPermissionsGranted) {
            // Ï†ÑÏ≤¥ÌôîÎ©¥ Ïπ¥Ïπ¥Ïò§Îßµ
            KakaoMapView(
                currentLocation = locationState.currentLocation,
                locationHistory = locationState.locationHistory,
                otherUsers = locationState.otherUsers,
                modifier = Modifier.fillMaxSize(),
                onUserMarkerClick = { user ->
                    // ÏÇ¨Ïö©Ïûê ÎßàÏª§ ÌÅ¥Î¶≠ Ïãú Ï≤òÎ¶¨ (ÏòµÏÖò)
                }
            )
        } else {
            // Í∂åÌïú ÏöîÏ≤≠ ÌôîÎ©¥
            PermissionRequestFullScreen(
                onRequestPermission = {
                    locationPermissions.launchMultiplePermissionRequest()
                }
            )
        }

        // ÏÉÅÎã® Ïò§Î≤ÑÎ†àÏù¥: Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº + ÏÉÅÌÉú Ï†ïÎ≥¥
        TopOverlay(
            isConnected = locationState.isConnectedToServer,
            totalUsers = locationState.totalUsersCount,
            currentLocation = locationState.currentLocation,
            userName = locationState.userName,
            onBackClick = { navController.popBackStack() }
        )

        // ÌïòÎã® Ïò§Î≤ÑÎ†àÏù¥: Ïª®Ìä∏Î°§ Î≤ÑÌäºÎì§
        BottomOverlay(
            isTracking = locationState.isTracking,
            isLocationEnabled = locationState.isLocationEnabled,
            isConnected = locationState.isConnectedToServer,
            onStartTracking = {
                if (locationPermissions.allPermissionsGranted) {
                    locationViewModel.startLocationUpdates()
                } else {
                    locationPermissions.launchMultiplePermissionRequest()
                }
            },
            onStopTracking = { locationViewModel.stopLocationUpdates() },
            onCurrentLocation = { locationViewModel.getCurrentLocation() },
            onRefreshUsers = { locationViewModel.refreshUsersList() }
        )

        // Ïò§Î•∏Ï™Ω ÏÇ¨Ïù¥Îìú Ïò§Î≤ÑÎ†àÏù¥: Ïò®ÎùºÏù∏ ÏÇ¨Ïö©Ïûê Î™©Î°ù
        if (locationState.otherUsers.isNotEmpty()) {
            RightSideOverlay(
                users = locationState.otherUsers,
                onUserClick = { user ->
                    // Ìï¥Îãπ ÏÇ¨Ïö©Ïûê ÏúÑÏπòÎ°ú ÏßÄÎèÑ Ïù¥Îèô (Ï∂îÌõÑ Íµ¨ÌòÑ Í∞ÄÎä•)
                }
            )
        }

        // ÏóêÎü¨ Î©îÏãúÏßÄ (Ï§ëÏïô ÏÉÅÎã®)
        locationState.error?.let { error ->
            ErrorOverlay(
                error = error,
                onDismiss = { locationViewModel.clearError() }
            )
        }
    }
}

@Composable
fun TopOverlay(
    isConnected: Boolean,
    totalUsers: Int,
    currentLocation: com.project.nolbom.data.network.LatLng?,
    userName: String,
    onBackClick: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.Top
    ) {
        // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
        FloatingActionButton(
            onClick = onBackClick,
            modifier = Modifier.size(56.dp),
            containerColor = Color.White,
            contentColor = Color.Black
        ) {
            Icon(
                imageVector = Icons.Default.ArrowBack,
                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞"
            )
        }

        // ÏÉÅÌÉú Ï†ïÎ≥¥ Ïπ¥Îìú
        Card(
            colors = CardDefaults.cardColors(
                containerColor = Color.White.copy(alpha = 0.9f)
            ),
            shape = RoundedCornerShape(12.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)
        ) {
            Column(
                modifier = Modifier.padding(12.dp),
                horizontalAlignment = Alignment.End
            ) {
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        imageVector = if (isConnected) Icons.Default.CloudDone else Icons.Default.CloudOff,
                        contentDescription = "Ïó∞Í≤∞ ÏÉÅÌÉú",
                        tint = if (isConnected) Color(0xFF4CAF50) else Color(0xFFFF9800),
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(4.dp))
                    Text(
                        text = if (isConnected) "$userName ‚Ä¢ $totalUsers Î™Ö" else "Ïó∞Í≤∞ ÏïàÎê®",
                        style = MaterialTheme.typography.bodySmall,
                        fontWeight = FontWeight.Bold
                    )
                }

                currentLocation?.let { location ->
                    Spacer(modifier = Modifier.height(4.dp))
                    Text(
                        text = "üìç ${String.format("%.4f", location.latitude)}, ${String.format("%.4f", location.longitude)}",
                        style = MaterialTheme.typography.bodySmall,
                        color = Color.Gray
                    )
                }
            }
        }
    }
}

@Composable
fun BottomOverlay(
    isTracking: Boolean,
    isLocationEnabled: Boolean,
    isConnected: Boolean,
    onStartTracking: () -> Unit,
    onStopTracking: () -> Unit,
    onCurrentLocation: () -> Unit,
    onRefreshUsers: () -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        verticalArrangement = Arrangement.Bottom
    ) {
        Card(
            colors = CardDefaults.cardColors(
                containerColor = Color.White.copy(alpha = 0.95f)
            ),
            shape = RoundedCornerShape(16.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                // Ï∂îÏ†Å ÏãúÏûë/Ï§ëÏßÄ Î≤ÑÌäº
                FloatingActionButton(
                    onClick = if (isTracking) onStopTracking else onStartTracking,
                    containerColor = if (isTracking) Color(0xFFFF5722) else Color(0xFF4CAF50),
                    modifier = Modifier.size(56.dp)
                ) {
                    Icon(
                        imageVector = if (isTracking) Icons.Default.Stop else Icons.Default.PlayArrow,
                        contentDescription = if (isTracking) "Ï∂îÏ†Å Ï§ëÏßÄ" else "Ï∂îÏ†Å ÏãúÏûë",
                        tint = Color.White
                    )
                }

                // ÌòÑÏû¨ ÏúÑÏπò Î≤ÑÌäº
                FloatingActionButton(
                    onClick = onCurrentLocation,
                    containerColor = Color(0xFF2196F3),
                    modifier = Modifier.size(56.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.MyLocation,
                        contentDescription = "ÌòÑÏû¨ ÏúÑÏπò",
                        tint = Color.White
                    )
                }

                // ÏÇ¨Ïö©Ïûê ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº
                FloatingActionButton(
                    onClick = {
                        if (isConnected) {
                            onRefreshUsers()
                        }
                    },
                    containerColor = if (isConnected) Color(0xFF9C27B0) else Color.Gray,
                    modifier = Modifier.size(56.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.Refresh,
                        contentDescription = "ÏÇ¨Ïö©Ïûê ÏÉàÎ°úÍ≥†Ïπ®",
                        tint = Color.White
                    )
                }

                // Ï†ÑÏ≤¥ Î≥¥Í∏∞ Î≤ÑÌäº
                FloatingActionButton(
                    onClick = { /* Ï†ÑÏ≤¥ Î≥¥Í∏∞ Í∏∞Îä• - Ï∂îÌõÑ Íµ¨ÌòÑ */ },
                    containerColor = Color(0xFFFF9800),
                    modifier = Modifier.size(56.dp)
                ) {
                    Icon(
                        imageVector = Icons.Default.CenterFocusWeak,
                        contentDescription = "Ï†ÑÏ≤¥ Î≥¥Í∏∞",
                        tint = Color.White
                    )
                }
            }
        }
    }
}

@Composable
fun RightSideOverlay(
    users: List<UserLocationInfo>,
    onUserClick: (UserLocationInfo) -> Unit
) {
    Column(
        modifier = Modifier
            .fillMaxHeight()
            .padding(end = 16.dp, top = 100.dp, bottom = 100.dp),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.End
    ) {
        Card(
            colors = CardDefaults.cardColors(
                containerColor = Color.White.copy(alpha = 0.9f)
            ),
            shape = RoundedCornerShape(12.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)
        ) {
            Column(
                modifier = Modifier
                    .width(120.dp)
                    .padding(8.dp)
            ) {
                Text(
                    text = "üü¢ Ïò®ÎùºÏù∏ (${users.size})",
                    style = MaterialTheme.typography.labelSmall,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(bottom = 8.dp)
                )

                users.take(5).forEach { user -> // ÏµúÎåÄ 5Î™ÖÎßå ÌëúÏãú
                    UserMiniCard(
                        user = user,
                        onClick = { onUserClick(user) }
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                }

                if (users.size > 5) {
                    Text(
                        text = "Ïô∏ ${users.size - 5}Î™Ö",
                        style = MaterialTheme.typography.labelSmall,
                        color = Color.Gray,
                        modifier = Modifier.padding(top = 4.dp)
                    )
                }
            }
        }
    }
}

@Composable
fun UserMiniCard(
    user: UserLocationInfo,
    onClick: () -> Unit
) {
    // ÏÇ¨Ïö©ÏûêÎ≥Ñ ÏÉâÏÉÅ
    val colors = listOf(
        Color(0xFF1976D2), Color(0xFF388E3C), Color(0xFFD32F2F),
        Color(0xFF7B1FA2), Color(0xFFF57C00), Color(0xFF0288D1)
    )
    val userColor = colors[user.userId.hashCode().mod(colors.size)]

    Card(
        colors = CardDefaults.cardColors(
            containerColor = userColor.copy(alpha = 0.1f)
        ),
        shape = RoundedCornerShape(8.dp),
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() }
    ) {
        Row(
            modifier = Modifier.padding(8.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(8.dp)
                    .clip(CircleShape)
                    .background(userColor)
            )
            Spacer(modifier = Modifier.width(6.dp))
            Text(
                text = user.userName,
                style = MaterialTheme.typography.labelSmall,
                color = userColor,
                fontWeight = FontWeight.Medium,
                maxLines = 1
            )
        }
    }
}

@Composable
fun ErrorOverlay(
    error: String,
    onDismiss: () -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(16.dp),
        horizontalArrangement = Arrangement.Center
    ) {
        Card(
            colors = CardDefaults.cardColors(
                containerColor = Color(0xFFFF5722).copy(alpha = 0.9f)
            ),
            shape = RoundedCornerShape(8.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)
        ) {
            Row(
                modifier = Modifier.padding(12.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    imageVector = Icons.Default.Warning,
                    contentDescription = "ÏóêÎü¨",
                    tint = Color.White,
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = error,
                    color = Color.White,
                    style = MaterialTheme.typography.bodySmall,
                    modifier = Modifier.weight(1f)
                )
                IconButton(onClick = onDismiss) {
                    Icon(
                        imageVector = Icons.Default.Close,
                        contentDescription = "Îã´Í∏∞",
                        tint = Color.White,
                        modifier = Modifier.size(16.dp)
                    )
                }
            }
        }
    }
}

@Composable
fun PermissionRequestFullScreen(
    onRequestPermission: () -> Unit
) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Black.copy(alpha = 0.8f)),
        contentAlignment = Alignment.Center
    ) {
        Card(
            colors = CardDefaults.cardColors(containerColor = Color.White),
            shape = RoundedCornerShape(16.dp),
            elevation = CardDefaults.cardElevation(defaultElevation = 12.dp),
            modifier = Modifier.padding(32.dp)
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Icon(
                    imageVector = Icons.Default.LocationOn,
                    contentDescription = null,
                    modifier = Modifier.size(64.dp),
                    tint = Color(0xFF83E3BD)
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "ÏúÑÏπò Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Ïã§ÏãúÍ∞Ñ ÏúÑÏπò Ï∂îÏ†Å Î∞è ÏßÄÎèÑ ÌëúÏãúÎ•º ÏúÑÌï¥\nÏúÑÏπò Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî",
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color.Gray
                )
                Spacer(modifier = Modifier.height(24.dp))
                Button(
                    onClick = onRequestPermission,
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF83E3BD)
                    ),
                    shape = RoundedCornerShape(8.dp)
                ) {
                    Text("Í∂åÌïú ÌóàÏö©ÌïòÍ∏∞")
                }
            }
        }
    }
}